////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// -----------------------------------------------------------------------------------------------------------------------------------------------------------
////   \file    VolkInstance.h
////   \author  Daniel Huc aka Dendy
////   \date    January 2019
////   -----------------------------
////   \brief   None
////   ---------------------------------------------------------------------------------------------------------------------------------------------------------
////   \details It's all about the constructor... :
////            -1- Init GLFW System if it's the first VolkInstance instance
////            -2- Set (hardcode for now) extensions and layers to use for this instance
////            -2- Retrieve supported extensions for Vulkan on this machine
////            -3- Retrieve supported extensions for Vulkan on this machine
////            And of course the destructor (RAII) - including shutdown of GLFW System
//// -----------------------------------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

//// - Standard includes section - ////

//// - External includes section - ////
#define GLFW_INCLUDE_VULKAN
#include "glfw3.h"
#include <vulkan/vulkan.h>

//// -Foundation includes section- ////
#include "DendyFoundation/Types.h"

//// - Internal includes section - ////

//// - Defines and macro section - ////

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Specific to 'WINDOWS/LINUX' <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#ifdef DENDYENGINE_PLATFORM_WINDOWS

#endif
#ifdef DENDYENGINE_PLATFORM_LINUX

#endif
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// ---- Namespaces ---- ////
namespace DendyEngine {

   namespace PixPhetamine {

      namespace VulkanSystem {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////   Class CVolkInstance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         class CVolkInstance {

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         //// ---- Enum/Struct/Constants -----                                                                                                   ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         public:
            static dyUInt instancesCount;

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         //// ---- Members -----                                                                                                                 ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         private:
            dyVec<dyString> m_supportedExtensionNamesVec;
            dyVec<dyString> m_activeExtensionNamesVec;

            dyVec<dyString> m_supportedValidationLayerNamesVec;
            dyVec<dyString> m_activeValidationLayerNamesVec;

            VkInstance m_vulkanInstance{ };
            
            VkSurfaceKHR m_surface{ };
            
            GLFWwindow* m_glfwWindowHandle{ nullptr };

            VkDebugReportCallbackEXT m_callback{ VK_NULL_HANDLE };

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         //// ---- Methods -----                                                                                                                 ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         private:
         //// ---- Internal ---- ////
            void _startGlfw( );
            dyVec<const char*> _retrieveSupportedExtensions( );
            dyVec<const char*> _retrieveSupportedValidationLayers( );
            void _setCallbackDebugLogger( );

         public:
         //// ----  Object  ---- ////
            CVolkInstance(
                  dyString const& a_programName = "PixPhetamine",
                  dyUInt a_programVersionMajor = 1,
                  dyUInt a_programVersionMinor = 0,
                  dyUInt a_programVersionPatch = 0 
            );
            ~CVolkInstance();
			
		   //// ----  Static  ---- ////

         private:
         //// ----  Forbid  ---- ////
			
		   public:
         //// ----   Core   ---- ////
            VkInstance getVulkanInstance( ) const { return m_vulkanInstance; }
            //dyVec<dyString> getSupportedExtensionsVec( ) const { return m_supportedExtensionsVec; }
            //dyVec<dyString> getValidationLayersVec( ) const { return m_validationLayersVec; }

         };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////                                                                                                                                                        ////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      }
   }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
