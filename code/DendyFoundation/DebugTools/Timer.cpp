#include "DendyFoundation/DebugTools/Timer.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// - Standard includes section - ////

//// - External includes section - ////

//// -Foundation includes section- ////
#include "DendyFoundation/DebugTools/DebugStack.h"

//// - Internal includes section - ////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// ---- Namespaces ---- ////
namespace DendyEngine {

   namespace DendyFoundation {

      namespace DebugTools {

//// - Defines and macro section - ////

//// - Using namespace shortcuts - ////

//// - Static const init section - ////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////   Class CTimer
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Internal methods -----                                                                                                     ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void CTimer::_updateElapsedTicks( ) {
      if ( m_isHighPerformanceClockIsSteady )
         m_elapsedTicks += std::chrono::high_resolution_clock::now( ) - m_startTicks;
      else
         m_elapsedTicks += std::chrono::steady_clock::now( ) - m_startTicks;
      _updateStartTicks( );
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void CTimer::_updateStartTicks( ) {
      if ( m_isHighPerformanceClockIsSteady )
         m_startTicks = std::chrono::high_resolution_clock::now( );
      else
         m_startTicks = std::chrono::steady_clock::now( );
   }


   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Object oriented methods -----                                                                                              ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   
   
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Static methods -----                                                                                                       ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//


   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Core methods -----                                                                                                         ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyUInt64 CTimer::getElapsedMicroseconds( ) {
      if ( m_isPaused )
         return std::chrono::duration_cast<std::chrono::microseconds>( m_elapsedTicks ).count( );
      else {
         _updateElapsedTicks( );
         return std::chrono::duration_cast<std::chrono::microseconds>( m_elapsedTicks ).count( );
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyUInt64 CTimer::getElapsedNanoseconds( ) {
      if ( m_isPaused )
         return std::chrono::duration_cast<std::chrono::nanoseconds>( m_elapsedTicks ).count( );
      else {
         _updateElapsedTicks( );
         return std::chrono::duration_cast<std::chrono::nanoseconds>( m_elapsedTicks ).count( );
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyUInt64 CTimer::getElapsedMiliseconds( ) {
      if ( m_isPaused )
         return std::chrono::duration_cast<std::chrono::milliseconds>( m_elapsedTicks ).count( );
      else {
         _updateElapsedTicks( );
         return std::chrono::duration_cast<std::chrono::milliseconds>( m_elapsedTicks ).count( );
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyUInt64 CTimer::getElapsedSeconds( ) {
      if ( m_isPaused )
         return std::chrono::duration_cast<std::chrono::seconds>( m_elapsedTicks ).count( );
      else {
         _updateElapsedTicks( );
         return std::chrono::duration_cast<std::chrono::seconds>( m_elapsedTicks ).count( );
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyUInt64 CTimer::getElapsedMinutes( ) {
      if ( m_isPaused )
         return std::chrono::duration_cast<std::chrono::minutes>( m_elapsedTicks ).count( );
      else {
         _updateElapsedTicks( );
         return std::chrono::duration_cast<std::chrono::minutes>( m_elapsedTicks ).count( );
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyUInt64 CTimer::getElapsedHours( ) {
      if ( m_isPaused )
         return std::chrono::duration_cast<std::chrono::hours>( m_elapsedTicks ).count( );
      else {
         _updateElapsedTicks( );
         return std::chrono::duration_cast<std::chrono::hours>( m_elapsedTicks ).count( );
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void CTimer::reset( ) {
      m_isPaused = false;
      _updateStartTicks( );
      m_elapsedTicks = std::chrono::duration<double>( 0 );
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void CTimer::resume( ) {
      if ( m_isPaused ) {
         _updateStartTicks( );
         m_isPaused = false;
      }
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void CTimer::pause( ) {
      _updateElapsedTicks( );
      m_isPaused = true;
   }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////                                                                                                                                                        ////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      }
   }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
