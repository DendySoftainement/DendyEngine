#include "DendyFoundation/CustomTypes/DyString.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// - Standard includes section - ////
#include <stdarg.h>

//// - External includes section - ////

//// -Foundation includes section- ////
#include "DendyFoundation/Types.h"

//// - Internal includes section - ////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// ---- Namespaces ---- ////
namespace DendyEngine {

   namespace DendyFoundation {

      namespace CustomTypes {

         //// - Defines and macro section - ////

         //// - Using namespace shortcuts - ////

         //// - Static const init section - ////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Internal methods -----                                                                                                     ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//


   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Object oriented methods -----                                                                                              ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //////// -- Constructors -- ////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString::dyString( ) {
      /***/
   }

   dyString::dyString( dyString const& a_string ) :
      m_memory( a_string.m_memory ) {
      /***/
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString::dyString( const char* a_string ):
      m_memory( a_string ) {
      /***/
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString::dyString( std::string a_string ):
      m_memory( a_string ) {
      /***/
    }


   //////// -- Operator + -- ////////
   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::operator+=( dyString const& a_string ) {
      m_memory += a_string.m_memory;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::operator+=( const char* a_string ) {
      m_memory += std::string( a_string );
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::operator+=( int_fast32_t a_integer ) {
      m_memory += std::to_string( a_integer );
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::operator+=( float a_float ) {
      m_memory += std::to_string( a_float );
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::operator+=( bool a_boolean ) {
      if ( a_boolean )
         m_memory += "true";
      else
         m_memory += "false";
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString dyString::operator+( dyString const& a_string ) {
      dyString result;
      result.m_memory += a_string.m_memory;
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString dyString::operator+( const char* a_string ) {
      dyString result;
      result.m_memory += a_string;
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString dyString::operator+( int_fast32_t a_integer ) {
      dyString result( std::to_string( a_integer ) );
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString dyString::operator+( float a_float ) {
      dyString result( std::to_string( a_float ) );
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString dyString::operator+( bool a_boolean ) {
      dyString result;
      if ( a_boolean )
         result += "true";
      else
         result += "false";
      return result;
   }

   //////// -- Comparator == -- ////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyBool dyString::operator==( dyString const& a_string ) {
      bool result = m_memory.compare( a_string.m_memory ) == 0;
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyBool dyString::operator==( const char* a_string ) {
      dyString otherString( a_string );
      bool result = m_memory.compare( otherString.m_memory ) == 0;
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString::operator bool( ) const {
      return m_memory.compare( "" ) == 0;
   }


   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Static methods -----                                                                                                       ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   dyString dyString::format( const char* a_format, ... ) {
      // Tipiaked from https://www.codeproject.com/articles/15115/how-to-format-a-string

      dyString result;

      if ( a_format != nullptr ) {
         va_list marker = NULL;

         // initialize variable arguments
         va_start( marker, a_format );

         // Get formatted string length adding one for NULL
         size_t len = _vscprintf( a_format, marker ) + 1;

         // Create a char vector to hold the formatted string.
         std::vector<char> buffer( len, '\0' );
         int nWritten = _vsnprintf_s( &buffer[0], buffer.size( ), len, a_format, marker );

         if ( nWritten > 0 ) {
            result.m_memory = &buffer[0];
         }

         // Reset variable arguments
         va_end( marker );
      }

      return result;
   }


   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Acessor methods -----                                                                                                      ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//


   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  ================================================================================================================================  ////
   ////    ---- Core methods -----                                                                                                         ////
   ////  ================================================================================================================================  ////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   //////// -- Find -- ////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   bool dyString::find( dyString const& a_toFind ) const {
      bool result = m_memory.find( a_toFind.m_memory ) == std::string::npos;
      return result;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   bool dyString::find( const char* a_toFind ) const {
      dyString otherString( a_toFind );
      bool result = m_memory.find( otherString.m_memory ) == std::string::npos;
      return result;
   }


   //////// -- Replace -- ////////

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::replace( dyString const& a_toFind, dyString const& a_newValue ) {
      std::string newString = "";
      std::string oldString = m_memory;
      std::size_t pos = oldString.find( a_toFind.m_memory );
      while ( pos != std::string::npos ) {
         newString += oldString.substr( 0, pos ) += a_newValue.m_memory;
         oldString = oldString.substr( pos );
         pos = oldString.find( a_toFind.m_memory );
      }
      m_memory = newString;
   }

   //----------------------------------------------------------------------------------------------------------------------------------------//
   //
   //----------------------------------------------------------------------------------------------------------------------------------------//
   void dyString::replace( const char* a_toFind, const char* a_newValue ) {
      replace( dyString( a_toFind ), dyString( a_newValue ) );
   }


   //////// -- Substring -- ////////

   /// \brief Eis phokoowin scheit gonna work as a python substring [2:-1]
   dyString dyString::substring( int_fast16_t a_begin, int_fast16_t a_end ) const {
      dyUInt64 realEnd = a_end;
      if ( a_end <= 0 ) {
         realEnd = m_memory.length( ) + a_end;
      }
      dyString result( m_memory.substr( a_begin, realEnd ) );
      return result;
   }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////                                                                                                                                                        ////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      }
   }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
