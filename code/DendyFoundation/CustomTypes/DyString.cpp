#include "DendyFoundation/CustomTypes/DyString.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// - Standard includes section - ////

//// - External includes section - ////

//// -Foundation includes section- ////
#include "DendyFoundation/DebugTools/DebugStack.h"

//// - Internal includes section - ////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// ---- Namespaces ---- ////
namespace DendyEngine {

   namespace DendyFoundation {

      namespace CustomTypes {

         //// - Defines and macro section - ////

         //// - Using namespace shortcuts - ////
         using namespace std;

         //// - Static const init section - ////

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////  ================================================================================================================================  ////
         ////    ---- Internal methods -----                                                                                                     ////
         ////  ================================================================================================================================  ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//


         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////  ================================================================================================================================  ////
         ////    ---- Object oriented methods -----                                                                                              ////
         ////  ================================================================================================================================  ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         //////// -- Constructors -- ////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString::dyString() {
         DENDYENGINE_CALLSTACK_ENTER;
            m_string = "";
         DENDYENGINE_CALLSTACK_EXIT;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString::dyString(dyUInt a_capacity) {
         DENDYENGINE_CALLSTACK_ENTER;
            m_string = "";
            m_string.resize(a_capacity);
         DENDYENGINE_CALLSTACK_EXIT;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString::dyString(const char* a_string) {
         DENDYENGINE_CALLSTACK_ENTER;
            m_string = string( a_string );
         DENDYENGINE_CALLSTACK_EXIT;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString::dyString(std::string a_string) {
         DENDYENGINE_CALLSTACK_ENTER;
            m_string = a_string;
         DENDYENGINE_CALLSTACK_EXIT;
         }


         //////// -- Operator + -- ////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString &dyString::operator+(dyString const& a_string) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString result = m_string + a_string.m_string;
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString &dyString::operator+(const char* a_string) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString result = *this + dyString( a_string );
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString &dyString::operator+(dyInt a_integer) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString result( std::to_string(a_integer) );
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }
         
         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString &dyString::operator+(dyFloat a_float) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString result(std::to_string(a_float));
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }
         
         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         dyString &dyString::operator+(dyBool a_boolean) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString result;
            if ( a_boolean )
               result = "true";
            else
               result = "false";
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         //////// -- Comparator == -- ////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         const dyBool &dyString::operator==(dyString const& a_string) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyBool result = m_string.compare(a_string.m_string);
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         const dyBool &dyString::operator==(const char* a_string) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString otherString(a_string);
            dyBool result = m_string.compare(otherString.m_string);
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////  ================================================================================================================================  ////
         ////    ---- Static methods -----                                                                                                       ////
         ////  ================================================================================================================================  ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//


         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////  ================================================================================================================================  ////
         ////    ---- Acessor methods -----                                                                                                      ////
         ////  ================================================================================================================================  ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//


         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////  ================================================================================================================================  ////
         ////    ---- Core methods -----                                                                                                         ////
         ////  ================================================================================================================================  ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         //////// -- Fully explicit casts (and interpret) -- ////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         const char* dyString::asConstChar() {
         DENDYENGINE_CALLSTACK_ENTER;
            const char* pResult = m_string.c_str();
         DENDYENGINE_CALLSTACK_EXIT;
            return pResult;
         }
         
         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         const char* dyString::asNewConstChar() {
         DENDYENGINE_CALLSTACK_ENTER;
            char* pResult = new char[m_string.length()+1];
            strcpy(pResult, m_string.c_str());
         DENDYENGINE_CALLSTACK_EXIT;
            return pResult;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         char* dyString::asNewChar() {
         DENDYENGINE_CALLSTACK_ENTER;
            char* pResult = new char[m_string.length() + 1];
            strcpy(pResult, m_string.c_str());
         DENDYENGINE_CALLSTACK_EXIT;
            return pResult;
         }


         //////// -- Find -- ////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         const dyBool dyString::find(dyString const& a_toFind) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyBool result = m_string.find(a_toFind.m_string);
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         const dyBool dyString::find(const char* a_toFind) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyString otherString( a_toFind );
            dyBool result = m_string.find(otherString.m_string);
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }


         //////// -- Replace -- ////////

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         void dyString::replace(dyString const& a_toFind, dyString const& a_newValue) {
         DENDYENGINE_CALLSTACK_ENTER;
            std::string newString = "";
            std::string oldString = m_string;
            std::size_t pos = oldString.find( a_toFind.m_string );
            while ( pos != string::npos ) {
               newString += oldString.substr( 0, pos ) += a_newValue.m_string;
               oldString = oldString.substr( pos );
               pos = oldString.find( a_toFind.m_string );
            }
            m_string = newString;
         DENDYENGINE_CALLSTACK_EXIT;
         }

         //----------------------------------------------------------------------------------------------------------------------------------------//
         //
         //----------------------------------------------------------------------------------------------------------------------------------------//
         void dyString::replace(const char* a_toFind, const char* a_newValue) {
         DENDYENGINE_CALLSTACK_ENTER;
            replace( dyString(a_toFind), dyString(a_newValue) );
         DENDYENGINE_CALLSTACK_EXIT;
         }


         //////// -- Substring -- ////////

         /// \brief Eis phokoowin scheit gonna work as a python substring [2:-1]
         dyString dyString::substring(dyInt a_begin, dyInt a_end) {
         DENDYENGINE_CALLSTACK_ENTER;
            dyInt realEnd = a_end;
            if ( a_end <= 0 ) {
               realEnd = m_string.length() + a_end;
            }
            dyString result = m_string.substr( a_begin, realEnd );            
         DENDYENGINE_CALLSTACK_EXIT;
            return result;
         }

         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         ////                                                                                                                                                        ////
         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      }
   }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
